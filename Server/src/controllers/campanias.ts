import { Request, Response } from 'express';
import { getCampanias, eliminarCampania, actualizarFinCampaniaAnterior, insertarNuevaCampania, replicarDatosNuevaCampania, getCampaniasFiltradas } from '../models/campanias';

// Endpoint para obtener todas las campa√±as
export const getCampaniasController = async (req: Request, res: Response): Promise<void> => {
  try {
    const campanias = await getCampanias();
    res.status(200).json({
      msg: '‚úÖ Campa√±as obtenidas correctamente',
      data: campanias,
    });
  } catch (error) {
    console.error('‚ùå Error al obtener campa√±as:', error);
    res.status(500).json({
      msg: '‚ùå Error interno en la API',
      error: error instanceof Error ? error.message : error,
    });
  }
};

export const getCampaniasFiltradasController = async (req: Request, res: Response): Promise<void> => {
  try {
    const { titulo_campania } = req.query;

    if (!titulo_campania) {
     res.status(400).json({ msg: '‚ùå Se requiere el par√°metro titulo_campania' });
    }

    const campanias = await getCampaniasFiltradas(titulo_campania as string);

    res.status(200).json({
      msg: '‚úÖ Campa√±as filtradas obtenidas correctamente',
      data: campanias,
    });
  } catch (error) {
    console.error('‚ùå Error al obtener campa√±as filtradas:', error);
    res.status(500).json({
      msg: '‚ùå Error interno en la API',
      error: error instanceof Error ? error.message : error,
    });
  }
};

export const eliminarCampaniaHandler = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id_campania } = req.params;  // ID de la campa√±a desde la URL
    console.log('ID recibido para eliminar en el backend:', id_campania);  // Debug
    await eliminarCampania(Number(id_campania));  // Llamada a la funci√≥n del modelo
    res.status(200).json({
      msg: '‚úÖ Campa√±a eliminada correctamente',
    });
  } catch (error) {
    console.error('‚ùå Error al eliminar campa√±a:', error);
    res.status(500).json({
      msg: '‚ùå Error interno en la API',
      error: error instanceof Error ? error.message : error,
    });
  }
};

// ‚úÖ Crear una nueva campa√±a con replicaci√≥n de datos
export const crearNuevaCampaniaHandler = async (req: Request, res: Response): Promise<void> => {
  try {
    const { titulo, fechaInicio, fechaFinAnterior } = req.body;

    if (!titulo || !fechaInicio || !fechaFinAnterior) {
      res.status(400).json({ msg: '‚ùå Todos los campos son obligatorios' });
      return;
    }

    console.log('üìå Datos recibidos:', { titulo, fechaInicio, fechaFinAnterior });

    // 1Ô∏è‚É£ Actualizar la fecha de fin de la campa√±a anterior
    await actualizarFinCampaniaAnterior(fechaFinAnterior);

    // 2Ô∏è‚É£ Insertar la nueva campa√±a con el ID siguiente
    const nuevoIdCampania = await insertarNuevaCampania(titulo, fechaInicio);

    // 3Ô∏è‚É£ Replicar datos de la √∫ltima campa√±a a la nueva
    await replicarDatosNuevaCampania(nuevoIdCampania - 1, nuevoIdCampania);

    res.status(201).json({
      msg: '‚úÖ Nueva campa√±a creada y datos replicados correctamente',
    });
  } catch (error) {
    console.error('‚ùå Error al crear la nueva campa√±a:', error);
    
    res.status(500).json({
      msg: '‚ùå Error interno en la API',
      error: error instanceof Error ? error.message : error,
    });
  }
};