"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registrarVehiculo = exports.getVehiculo = exports.getVehiculos = void 0;
const vehiculos_1 = require("../models/vehiculos");
const equipos_1 = require("../models/equipos"); // üëà Importa correctamente la funci√≥n
// ‚úÖ Obtener todos los veh√≠culos
const getVehiculos = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const vehiculos = yield (0, vehiculos_1.getAllVehiculos)();
        res.json({ msg: "‚úÖ Veh√≠culos obtenidos correctamente", data: vehiculos });
    }
    catch (error) {
        console.error("‚ùå Error al obtener veh√≠culos:", error);
        res.status(500).json({ msg: "‚ùå Error al obtener veh√≠culos", error });
    }
});
exports.getVehiculos = getVehiculos;
// ‚úÖ Obtener un veh√≠culo por matr√≠cula
const getVehiculo = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { matricula } = req.params;
    try {
        const vehiculo = yield (0, vehiculos_1.getVehiculoById)(matricula);
        if (!vehiculo.length) {
            res.status(404).json({ msg: "‚ùå Veh√≠culo no encontrado" });
            return;
        }
        res.json({ msg: "‚úÖ Veh√≠culo encontrado", data: vehiculo[0] });
    }
    catch (error) {
        console.error("‚ùå Error al obtener el veh√≠culo:", error);
        res.status(500).json({ msg: "‚ùå Error al obtener el veh√≠culo", error });
    }
});
exports.getVehiculo = getVehiculo;
// ‚úÖ Insertar un nuevo veh√≠culo
const registrarVehiculo = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log("üì• Datos recibidos en la solicitud:", req.body);
        const { matricula, descripcion, recurso, empresa, telefono } = req.body;
        if (!matricula || !descripcion || !recurso || !empresa || !telefono) {
            res.status(400).json({ msg: "‚ùå Todos los campos son obligatorios" });
            return;
        }
        // ‚úÖ Obtener la √∫ltima campa√±a activa
        const idCampania = yield (0, equipos_1.getLastCampaignId)(); // üìå No devuelve un array, sino un n√∫mero o null
        if (!idCampania) {
            res.status(400).json({ msg: "‚ùå No hay campa√±as activas disponibles" });
            return;
        }
        // ‚úÖ Llamar a la funci√≥n de inserci√≥n
        yield (0, vehiculos_1.registrarNuevoVehiculo)(matricula, descripcion, recurso, empresa, telefono, idCampania);
        res.json({ msg: "‚úÖ Veh√≠culo registrado correctamente" });
    }
    catch (error) {
        console.error("‚ùå Error al registrar el veh√≠culo:", error);
        res.status(500).json({ msg: "‚ùå Error al registrar el veh√≠culo", error });
    }
});
exports.registrarVehiculo = registrarVehiculo;
